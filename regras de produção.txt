program ::= program identifier body 
body::= [declare decl-list] begin stmt-list end
decl-list ::= decl {";" decl}
decl ::= ident-list":" type
ident-list ::= identifier {"," identifier}
type ::= int| float| char
stmt-list ::= stmt {";" stmt}
stmt  ::= assign-stmt | if-stmt | while-stmt | repeat-stmt | read-stmt | write-stmt
assign-stmt ::= identifier "=" simple_expr
if-stmt ::= if condition then stmt-list if-stmt'
if-stmt' ::= end | else stmt-list end
condition ::= expression
repeat-stmt ::= repeat  stmt-list stmt-suffix
stmt-suffix ::= until condition
while-stmt ::= stmt-prefix stmt-list end
stmt-prefix ::= while condition do
read-stmt ::= in"(" identifier")"
write-stmt ::= out"("writable ")"
writable ::= simple-expr | literal
expression ::= simple-expr expression'
expression' ::= relop simple-expr | λ 
simple-expr ::= term simple-expr'
simple-expr' ::= addop term simple-expr' | λ
term ::= factor-a term'
term' ::= mulop factor-a term' | λ
fator-a ::= factor | !factor | "-" factor
factor ::= identifier | constant | "(" expression ")"
relop ::= "==" | ">" | ">=" | "<" | "<=" | "!="
addop ::= "+" | "-" | ||
mulop ::= "*" | "/" | &&
constant ::= integer_const | float_const | char_const